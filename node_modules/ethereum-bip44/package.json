{
  "name": "ethereum-bip44",
  "version": "2.1.3",
  "description": "bip 44 hierarchical deterministic address generation for ethereum",
  "main": "es5/index.js",
  "author": {
    "name": "Timon Rapp",
    "email": "timon@zaeda.net"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/trapp/ethereum-bip44.git"
  },
  "bugs": {
    "url": "https://github.com/trapp/ethereum-bip44/issues"
  },
  "homepage": "https://github.com/trapp/ethereum-bip44",
  "license": "MPL-2.0",
  "keywords": [
    "ethereum",
    "bip44",
    "bip32",
    "hd"
  ],
  "scripts": {
    "prepublish": "./node_modules/.bin/babel src --out-dir es5 --stage 0"
  },
  "dependencies": {
    "bitcore-lib": "0.13.13",
    "ethereumjs-util": "4.0.1",
    "elliptic": "6.2.3",
    "assert": "^1.3.0"
  },
  "devDependencies": {
    "babel": "^5.8.14"
  },
  "files": [
    "README.md",
    "src/index.js",
    "es5/index.js"
  ],
  "readme": "Ethereum-Bip44\n==============\n\nLibrary to generate Ethereum addresses from a hierarchical deterministic wallet according to the [BIP44 standard](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki).\n\nInternally it uses [bitcore](https://bitcore.io/) for the deterministic private and public keys which allows to use many additional features like deriving Ethereum address from mnemonic backups ([BIP32](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki)).\n\n## Getting Started\n\n```bash\nnpm install ethereum-bip44\n```\n\nCreate a new wallet:\n```js\nvar bitcore = require('bitcore-lib');\nvar EthereumBip44 = require('ethereum-bip44');\n// create a new master private key\nvar key = bitcore.HDPrivateKey();\n// create the hd wallet\nvar wallet = new EthereumBip44(key);\n// output the first address\nconsole.log(wallet.getAddress(0));\n// output the second address\nconsole.log(wallet.getAddress(1));\n```\n\nInitialize from an existing private seed:\n```js\nvar bitcore = require('bitcore-lib');\nvar EthereumBip44 = require('ethereum-bip44');\n// create the hd wallet\nvar wallet = EthereumBip44.fromPrivateSeed('xprv9s21ZrQH143K4BX2reUURqR54XkNhbNkFhEiRQqFkzu5z7T1dp9eMGozFTgKVu5Bs6R8Wd8BuhcJ3rj3LvzJvkc9uBc5xdhstRfJgcTLsjk');\n// output the first address\nconsole.log(wallet.getAddress(0));\n// output the second address\nconsole.log(wallet.getAddress(1));\n```\n\nInitialize it from a public seed, for example on hot wallets that don't hold private keys:\n```js\nvar bitcore = require('bitcore-lib');\nvar EthereumBip44 = require('ethereum-bip44');\nvar key = new bitcore.HDPrivateKey();\nvar derivedPubKey = key.derive(\"m/44'/60'/0'/0\").hdPublicKey;\n// create the hd wallet\nvar wallet = EthereumBip44.fromPublicSeed(derivedPubKey.toString());\n// output the first address\nconsole.log(wallet.getAddress(0));\n// output the second address\nconsole.log(wallet.getAddress(1));\n```\n\n**Note:** You need to use a derived public key like shown here, otherwise it won't allow to derive hardened keys.\n\n## License\n\nMPL-2.0\n",
  "readmeFilename": "README.md",
  "_id": "ethereum-bip44@2.1.3",
  "_from": "ethereum-bip44@^2.1.3"
}
